{
  "uid" : "fc279fae270e9ccf",
  "name" : "test_add_contact_to_group",
  "fullName" : "test.contacts.test_delete_contact_from_group.test_add_contact_to_group",
  "historyId" : "98a079d43bfe0dc558d12370a9f60fac",
  "time" : {
    "start" : 1532470880999,
    "stop" : 1532470888753,
    "duration" : 7754
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "failed",
  "statusMessage" : "NoSuchElementException: Message: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@value='184']\"}\nStacktrace:\n    at FirefoxDriver.prototype.findElementInternal_ (file:///C:/Users/User/AppData/Local/Temp/tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js:11878)\n    at fxdriver.Timer.prototype.setTimeout/<.notify (file:///C:/Users/User/AppData/Local/Temp/tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js:918)",
  "statusTrace" : "appl = <fixture.application.App object at 0x03F7FBD0>\norm = <fixture.orm.ORMFixture object at 0x03F83A90>\n\n    def test_add_contact_to_group(appl, orm):\n        group = []\n        contact = []\n        with pytest.allure.step('Given an old groups list'):\n            group_list = orm.orm_get_group_list()\n        with pytest.allure.step('Given an old contacts list'):\n            contact_list = orm.orm_get_contact_list()\n        with pytest.allure.step(\n                'Presteps. Create contact and/or group and/or add contact the group if it is needed'):\n            if len(group_list) == 0:\n                g_name = \"test\" + \"\".join([random.choice(string.digits) for i in range(4)])\n                appl.group.create(Group(_name=g_name))\n            for g in group_list:\n                contacts = orm.get_contacts_in_group(g) # get group having contacts out of it\n                if len(contacts) > 0:\n                    if group == []:\n                        group.append(g)\n                    if contact == []:\n                        contact.append(random.choice(contacts))\n        with pytest.allure.step('Given a group and contact'):\n            if group != []:\n                gr = group[0]\n                cont = contact[0]\n            else:\n                if len(contact_list) == 0:\n                    appl.contact.create(\n                        Contact(_firstname=\"testfirst44\" + \"\".join([random.choice(string.digits) for i in range(7)]),\n                                _lastname=\"testlast44\" + \"\".join([random.choice(string.digits) for i in range(4)])))\n                gr = random.choice(orm.orm_get_group_list())\n                cont = random.choice(orm.orm_get_contact_list())\n                appl.contact.add_contact_to_group(cont, gr)\n    \n        with pytest.allure.step('When I delete contact %s from the group %s' % (cont, gr)):\n>           appl.contact.delete_contact_from_group(cont, gr)\n\ntest\\contacts\\test_delete_contact_from_group.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nfixture\\contact.py:192: in delete_contact_from_group\n    self.select_contact_by_id(c.id)\nfixture\\contact.py:165: in select_contact_by_id\n    if not wd.find_element_by_xpath(\"//input[@value='\" + id + \"']\").is_selected():\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:387: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:957: in find_element\n    'value': value})['value']\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:314: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x03F85790>\nresponse = {'status': 500, 'value': '{\"name\":\"findElement\",\"sessionId\":\"2427a66d-f443-4eb0-977d-a4ffb170ac23\",\"status\":7,\"value\":.../tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js\",\"lineNumber\":918,\"columnNumber\":5}]}}'}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@value='184']\"}\nE       Stacktrace:\nE           at FirefoxDriver.prototype.findElementInternal_ (file:///C:/Users/User/AppData/Local/Temp/tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js:11878)\nE           at fxdriver.Timer.prototype.setTimeout/<.notify (file:///C:/Users/User/AppData/Local/Temp/tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js:918)\n\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "NoSuchElementException: Message: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@value='184']\"}\nStacktrace:\n    at FirefoxDriver.prototype.findElementInternal_ (file:///C:/Users/User/AppData/Local/Temp/tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js:11878)\n    at fxdriver.Timer.prototype.setTimeout/<.notify (file:///C:/Users/User/AppData/Local/Temp/tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js:918)",
    "statusTrace" : "appl = <fixture.application.App object at 0x03F7FBD0>\norm = <fixture.orm.ORMFixture object at 0x03F83A90>\n\n    def test_add_contact_to_group(appl, orm):\n        group = []\n        contact = []\n        with pytest.allure.step('Given an old groups list'):\n            group_list = orm.orm_get_group_list()\n        with pytest.allure.step('Given an old contacts list'):\n            contact_list = orm.orm_get_contact_list()\n        with pytest.allure.step(\n                'Presteps. Create contact and/or group and/or add contact the group if it is needed'):\n            if len(group_list) == 0:\n                g_name = \"test\" + \"\".join([random.choice(string.digits) for i in range(4)])\n                appl.group.create(Group(_name=g_name))\n            for g in group_list:\n                contacts = orm.get_contacts_in_group(g) # get group having contacts out of it\n                if len(contacts) > 0:\n                    if group == []:\n                        group.append(g)\n                    if contact == []:\n                        contact.append(random.choice(contacts))\n        with pytest.allure.step('Given a group and contact'):\n            if group != []:\n                gr = group[0]\n                cont = contact[0]\n            else:\n                if len(contact_list) == 0:\n                    appl.contact.create(\n                        Contact(_firstname=\"testfirst44\" + \"\".join([random.choice(string.digits) for i in range(7)]),\n                                _lastname=\"testlast44\" + \"\".join([random.choice(string.digits) for i in range(4)])))\n                gr = random.choice(orm.orm_get_group_list())\n                cont = random.choice(orm.orm_get_contact_list())\n                appl.contact.add_contact_to_group(cont, gr)\n    \n        with pytest.allure.step('When I delete contact %s from the group %s' % (cont, gr)):\n>           appl.contact.delete_contact_from_group(cont, gr)\n\ntest\\contacts\\test_delete_contact_from_group.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nfixture\\contact.py:192: in delete_contact_from_group\n    self.select_contact_by_id(c.id)\nfixture\\contact.py:165: in select_contact_by_id\n    if not wd.find_element_by_xpath(\"//input[@value='\" + id + \"']\").is_selected():\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:387: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:957: in find_element\n    'value': value})['value']\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:314: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x03F85790>\nresponse = {'status': 500, 'value': '{\"name\":\"findElement\",\"sessionId\":\"2427a66d-f443-4eb0-977d-a4ffb170ac23\",\"status\":7,\"value\":.../tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js\",\"lineNumber\":918,\"columnNumber\":5}]}}'}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@value='184']\"}\nE       Stacktrace:\nE           at FirefoxDriver.prototype.findElementInternal_ (file:///C:/Users/User/AppData/Local/Temp/tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js:11878)\nE           at fxdriver.Timer.prototype.setTimeout/<.notify (file:///C:/Users/User/AppData/Local/Temp/tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js:918)\n\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException",
    "steps" : [ {
      "name" : "Given an old groups list",
      "time" : {
        "start" : 1532470884299,
        "stop" : 1532470884299,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Given an old contacts list",
      "time" : {
        "start" : 1532470884299,
        "stop" : 1532470884309,
        "duration" : 10
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Presteps. Create contact and/or group and/or add contact the group if it is needed",
      "time" : {
        "start" : 1532470884309,
        "stop" : 1532470884401,
        "duration" : 92
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Given a group and contact",
      "time" : {
        "start" : 1532470884401,
        "stop" : 1532470884401,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "When I delete contact 184:test_firstname7_new:test_lastname7_new:None:None:(None,) from the group 314:test8434::",
      "time" : {
        "start" : 1532470884401,
        "stop" : 1532470888431,
        "duration" : 4030
      },
      "status" : "failed",
      "statusMessage" : "appl = <fixture.application.App object at 0x03F7FBD0>\norm = <fixture.orm.ORMFixture object at 0x03F83A90>\n\n    def test_add_contact_to_group(appl, orm):\n        group = []\n        contact = []\n        with pytest.allure.step('Given an old groups list'):\n            group_list = orm.orm_get_group_list()\n        with pytest.allure.step('Given an old contacts list'):\n            contact_list = orm.orm_get_contact_list()\n        with pytest.allure.step(\n                'Presteps. Create contact and/or group and/or add contact the group if it is needed'):\n            if len(group_list) == 0:\n                g_name = \"test\" + \"\".join([random.choice(string.digits) for i in range(4)])\n                appl.group.create(Group(_name=g_name))\n            for g in group_list:\n                contacts = orm.get_contacts_in_group(g) # get group having contacts out of it\n                if len(contacts) > 0:\n                    if group == []:\n                        group.append(g)\n                    if contact == []:\n                        contact.append(random.choice(contacts))\n        with pytest.allure.step('Given a group and contact'):\n            if group != []:\n                gr = group[0]\n                cont = contact[0]\n            else:\n                if len(contact_list) == 0:\n                    appl.contact.create(\n                        Contact(_firstname=\"testfirst44\" + \"\".join([random.choice(string.digits) for i in range(7)]),\n                                _lastname=\"testlast44\" + \"\".join([random.choice(string.digits) for i in range(4)])))\n                gr = random.choice(orm.orm_get_group_list())\n                cont = random.choice(orm.orm_get_contact_list())\n                appl.contact.add_contact_to_group(cont, gr)\n    \n        with pytest.allure.step('When I delete contact %s from the group %s' % (cont, gr)):\n>           appl.contact.delete_contact_from_group(cont, gr)\n\ntest\\contacts\\test_delete_contact_from_group.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nfixture\\contact.py:192: in delete_contact_from_group\n    self.select_contact_by_id(c.id)\nfixture\\contact.py:165: in select_contact_by_id\n    if not wd.find_element_by_xpath(\"//input[@value='\" + id + \"']\").is_selected():\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:387: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:957: in find_element\n    'value': value})['value']\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:314: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x03F85790>\nresponse = {'status': 500, 'value': '{\"name\":\"findElement\",\"sessionId\":\"2427a66d-f443-4eb0-977d-a4ffb170ac23\",\"status\":7,\"value\":.../tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js\",\"lineNumber\":918,\"columnNumber\":5}]}}'}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@value='184']\"}\nE       Stacktrace:\nE           at FirefoxDriver.prototype.findElementInternal_ (file:///C:/Users/User/AppData/Local/Temp/tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js:11878)\nE           at fxdriver.Timer.prototype.setTimeout/<.notify (file:///C:/Users/User/AppData/Local/Temp/tmpma1s3dju/extensions/fxdriver@googlecode.com/components/driver-component.js:918)\n\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "15a050cd01ed26e8",
      "name" : "Captured stdout call",
      "source" : "15a050cd01ed26e8.txt",
      "type" : "text/plain",
      "size" : 4
    } ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "host",
    "value" : "User-PC"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "thread",
    "value" : "11416-MainThread"
  }, {
    "name" : "suite",
    "value" : "test.contacts.test_delete_contact_from_group"
  }, {
    "name" : "testClass",
    "value" : "test.contacts.test_delete_contact_from_group"
  }, {
    "name" : "testMethod",
    "value" : "test_add_contact_to_group"
  }, {
    "name" : "package",
    "value" : "test.contacts.test_delete_contact_from_group"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "fc279fae270e9ccf.json",
  "parameterValues" : [ ]
}